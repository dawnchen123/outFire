// Generated by gencpp from file dahua_ptzcontrol/Temperature.msg
// DO NOT EDIT!


#ifndef DAHUA_PTZCONTROL_MESSAGE_TEMPERATURE_H
#define DAHUA_PTZCONTROL_MESSAGE_TEMPERATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dahua_ptzcontrol
{
template <class ContainerAllocator>
struct Temperature_
{
  typedef Temperature_<ContainerAllocator> Type;

  Temperature_()
    : max_temperature(0.0)
    , min_temperature(0.0)
    , timer(0)  {
    }
  Temperature_(const ContainerAllocator& _alloc)
    : max_temperature(0.0)
    , min_temperature(0.0)
    , timer(0)  {
  (void)_alloc;
    }



   typedef float _max_temperature_type;
  _max_temperature_type max_temperature;

   typedef float _min_temperature_type;
  _min_temperature_type min_temperature;

   typedef int32_t _timer_type;
  _timer_type timer;





  typedef boost::shared_ptr< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> const> ConstPtr;

}; // struct Temperature_

typedef ::dahua_ptzcontrol::Temperature_<std::allocator<void> > Temperature;

typedef boost::shared_ptr< ::dahua_ptzcontrol::Temperature > TemperaturePtr;
typedef boost::shared_ptr< ::dahua_ptzcontrol::Temperature const> TemperatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dahua_ptzcontrol::Temperature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dahua_ptzcontrol

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dahua_ptzcontrol': ['/home/hp-dawn/workspace/outfire/src/dahua_ptzcontrol/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efdfa2e0b9ac13acef941502135a514f";
  }

  static const char* value(const ::dahua_ptzcontrol::Temperature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefdfa2e0b9ac13acULL;
  static const uint64_t static_value2 = 0xef941502135a514fULL;
};

template<class ContainerAllocator>
struct DataType< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dahua_ptzcontrol/Temperature";
  }

  static const char* value(const ::dahua_ptzcontrol::Temperature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 max_temperature\n\
float32 min_temperature\n\
int32 timer\n\
";
  }

  static const char* value(const ::dahua_ptzcontrol::Temperature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_temperature);
      stream.next(m.min_temperature);
      stream.next(m.timer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Temperature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dahua_ptzcontrol::Temperature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dahua_ptzcontrol::Temperature_<ContainerAllocator>& v)
  {
    s << indent << "max_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.max_temperature);
    s << indent << "min_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.min_temperature);
    s << indent << "timer: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAHUA_PTZCONTROL_MESSAGE_TEMPERATURE_H
